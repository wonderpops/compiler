ProgramModuleNode(name=IdentificatorNode(name='a'), params=ProgramParamsNode(params=[]), body=BlockNode(declarations=DeclarationsNode(constants=ConstDefBlockNode(constants=[]), variables=VarDeclBlockNode(variables=[VarDeclNode(idents=IdentListNode(idents=[IdentificatorNode(name='a'), IdentificatorNode(name='i'), IdentificatorNode(name='k'), IdentificatorNode(name='n')]), idsType=TypeNode(name='integer'))]), subprogs=SubprogDeclListNode(declList=[])), statementSequence=StatementSequenceNode(statements=[AssignmentNode(op=':=', varName=DesignatorNode(name='n', stuff=[]), expression=LiteralIntNode(value=10)), AssignmentNode(op=':=', varName=DesignatorNode(name='k', stuff=[]), expression=LiteralIntNode(value=1)), ForNode(designator=IdentificatorNode(name='i'), left=LiteralIntNode(value=1), right=DesignatorNode(name='n', stuff=[]), way=WichWayNode(direction='to'), statements=StatementSequenceNode(statements=[InStatmentNode(name='readln', designatorList=DesignatorListNode(designators=[DesignatorNode(name=IdentificatorNode(name='a'), stuff=[])])), IncompleteIfNode(condition=BinaryOpNode(op='>=', left=DesignatorNode(name='a', stuff=[]), right=LiteralIntNode(value=100)), trueStatement=AssignmentNode(op=':=', varName=DesignatorNode(name='k', stuff=[]), expression=BinaryOpNode(op='+', left=DesignatorNode(name='k', stuff=[]), right=LiteralIntNode(value=1))))]))])))